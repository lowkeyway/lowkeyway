# -*- coding: utf-8 -*-
# @Time    : 6/28/2021 4:19 PM
# @Author  : lowkeyway
import sys
from pathlib import Path
import re
import numpy as np

heart_path = "./test/touch_heart"
h_file = "./svm_predict.h"

class heart:
    def __init__(self):
        self.log_path = None
        self.sv_label = []
        self.sv_data = []

    def load(self, log_path):
        self.log_path = Path(log_path).resolve(True)
        print(self.log_path)

        if self.log_path.is_file():
            try:
                file_name = self.log_path.name
                print("File_name:\n", file_name)
                with self.log_path.open() as f:
                    for line in f:
                        node_temp = []
                        data = line.split()
                        self.sv_label.append(data[0])
                        for SV in data[1:]:
                            node = SV.split(":")
                            node_temp.append(node[1])
                        self.sv_data.append(node_temp)

            except Exception:
                print(f"[INVALID LOG FILE]{self.log_path.name}")

    def dump(self):
        print(self.log_path)
        print(self.sv_label)
        print(self.sv_data)

    def save(self, file_path):
        svm_predict_h = ""
        with open(file_path, mode='w', encoding='utf-8') as file_obj:
            svm_predict_h += "//This file is generated by model2C.py, DO NOT modify it\n"

            svm_predict_h += "double predict_target_label[%d] = {" %(len(self.sv_label))
            for i, enum, in enumerate(self.sv_label):
                if 0 == i %10 and i != 0:
                    svm_predict_h += "\n\t"
                svm_predict_h += enum + ", "

            svm_predict_h += "};\n"

            # svm_predict_h += "struct svm_node predict_data[%d][%d] = {" % (len(self.sv_data), len(self.sv_data[0]) + 1)
            # for i, enum, in enumerate(self.sv_data):
            #     svm_predict_h += "\n\t{"
            #     for j, data in enumerate(enum):
            #         if 0 == j % 10:
            #             svm_predict_h += "\n\t\t"
            #         svm_predict_h += "{%d, %s}, " % (j + 1, data)
            #
            #     svm_predict_h += "{-1, -1}"
            #     svm_predict_h += "\n\t},\n"
            #     # if 0 == i % 10:
            #     #     svm_predict_h += "\n\t"
            # svm_predict_h += "\n};\n"

            svm_predict_h += "double predict_data[%d][%d] = {" % (len(self.sv_data), len(self.sv_data[0]))
            for i, enum, in enumerate(self.sv_data):
                svm_predict_h += "\n\t{"
                for j, data in enumerate(enum):
                    if 0 == j % 16:
                        svm_predict_h += "\n\t\t"
                    svm_predict_h += "%4s, " % (data)
                svm_predict_h += "\n\t},\n"
                # if 0 == i % 10:
                #     svm_predict_h += "\n\t"
            svm_predict_h += "\n};\n"

            file_obj.write(svm_predict_h)

def main_func(argv):
    args = len(argv)
    if args == 1:
        log_path = heart_path
    elif args == 2:
        log_path = argv[1]
    else:
        print("Incorrect Input!\n")
        return

    print("log_path = ", log_path)
    H = heart()
    H.load(log_path)
    H.dump()
    H.save(h_file)

if __name__ == '__main__':
    main_func(sys.argv)